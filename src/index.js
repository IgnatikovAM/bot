/**********************************************************************
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ WhatsApp + DeepSeek
 * -------------------------------------------------
 * ‚Ä¢ RAG-–ø–∞–º—è—Ç—å (–ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ ‚Üí MemoryService)
 * ‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ‚Üí ChatManager
 * ‚Ä¢ –û–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ Yandex SpeechKit
 * ‚Ä¢ OpenWeather –¥–ª—è –ø–æ–≥–æ–¥—ã
 *********************************************************************/

import fs from 'fs';
import qrcode from 'qrcode-terminal';
import WhatsAppWeb from 'whatsapp-web.js';
const { Client, LocalAuth, MessageMedia } = WhatsAppWeb;

import { config } from './config/index.js';
import { runMigrations } from './db/migrations.js';
import { pool } from './db/pool.js';

import { serviceTypes, allowedTypes } from './constants.js';
import { isExplicitRequest } from './utils/helpers.js';
import { CityParser } from './utils/CityParser.js';

import { MediaProcessor } from './managers/MediaProcessor.js';
import { ChatManager }   from './managers/ChatManager.js';

import { IntentAnalyzer } from './analyzers/IntentAnalyzer.js';
import { MoodAnalyzer }   from './analyzers/MoodAnalyzer.js';
import { StyleAnalyzer }  from './analyzers/StyleAnalyzer.js';

import { WeatherService } from './services/WeatherService.js';
import { DeepSeekService } from './services/DeepSeekService.js';
import { TimeService }   from './services/TimeService.js';
import { remember }      from './services/MemoryService.js';

const BOT_START = Math.floor(Date.now() / 1000);

/* ------------------------------------------------------------------ */
/* –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î + –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏                                            */
await runMigrations();
if (!fs.existsSync(config.MEDIA_DIR)) fs.mkdirSync(config.MEDIA_DIR, { recursive: true });

/* ------------------------------------------------------------------ */
/* –∫–ª–∏–µ–Ω—Ç WhatsApp                                                     */
const client = new Client({
  authStrategy: new LocalAuth({ dataPath: './sessions' }),
  puppeteer: { headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] }
});

client.on('qr', qr => {
  qrcode.generate(qr, { small: true });
  fs.writeFileSync('qrcode.txt', qr);
});
client.on('ready', () => console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));

/* ------------------------------------------------------------------ */
/* –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π                                 */
async function saveNotification(chat, type, body) {
  await pool.query(
    'INSERT INTO notifications (chat, type, message) VALUES (?, ?, ?)',
    [chat, type, body]
  );
}

/* ------------------------------------------------------------------ */
/* –ª–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è                                    */
client.on('message', m => {
  if (serviceTypes.has(m.type))
    saveNotification(m.from, m.subtype || m.type, m.body);
});

/* ------------------------------------------------------------------ */
/* –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫                                                 */
client.on('message', async (msg) => {
  if (msg.fromMe || serviceTypes.has(msg.type)) return;

  /* ---- MediaProcessor —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –≥–æ–ª–æ—Å / —Ñ–∞–π–ª—ã / —Ç.–¥. ---- */
  const m = await MediaProcessor.handle(msg);
  if (!allowedTypes.has(m.type)) {
    saveNotification(msg.from, m.type, m.content || '[–º–µ–¥–∏–∞]');
    return;
  }

  /* ---- –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ ---- */
  const phone   = msg.from.split('@')[0];
  const table   = `messages_${phone}`;
  const explicit = isExplicitRequest(m.content);

  /* ---- RAG-–ø–∞–º—è—Ç—å: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ ---- */
  await remember(phone, m.content);

  /* ---- –ë–î —á–∞—Ç–æ–≤ / —Ç–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---- */
  const [ins] = await pool.query(
    'INSERT INTO chats (contact) VALUES (?) ON DUPLICATE KEY UPDATE id=LAST_INSERT_ID(id)',
    [phone]
  );
  const chatId = ins.insertId;
  await ChatManager.createMessagesTableIfNotExists(table);

  /* ---- –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é ---- */
  const mood = await MoodAnalyzer.detectMood(m.content);

  /* ---- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ ---- */
  await ChatManager.saveMessage(
    table, chatId,
    m.content || '[–º–µ–¥–∏–∞]', false, m.type, mood, 'INFORMAL',
    m.audio_hash, null, m.media_url, null,
    msg.id._serialized, null
  );

  /* ---- –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –∑–∞–ø—É—Å–∫–∞ ---- */
  if (msg.timestamp < BOT_START) return;

  /* ---- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ + –∞–≤—Ç–æ-—Å—Ç–∏–ª—å ---- */
  const settings = await ChatManager.getChatSettings(chatId);
  let   style    = settings.style;
  if (settings.auto_style) {
    const auto = await ChatManager.applyAutoStyle(await ChatManager.getHistory(table));
    style = config.STYLES[auto.style] ? auto.style : 'INFORMAL';
  }

  /* ---- –∏–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π) ---- */
  const city = CityParser.extractCity(m.content)
           || await ChatManager.getLastUsedCity(table)
           || config.DEFAULT_CITY;

  /* ---- Intent ---------------------------------------------------- */
  const intent = await IntentAnalyzer.detectIntent(m.content, m.type === 'voice');

  let reply     = '';
  let outType   = 'text';
  let weather   = null;

  /* ----------------------------------------------------------------
   *                    –û–ë–†–ê–ë–û–¢–ö–ê INTENT'–û–í
   * ----------------------------------------------------------------*/
  switch (intent) {

    /* ---------- –Ø–í–ù–´–ô –ó–ê–ü–†–û–° –§–ê–ö–¢–ê / –ü–†–û–ì–ù–û–ó–ê –ü–û–ì–û–î–´ ------------- */
    case 'weather_request': {
      weather = await WeatherService.getWeatherForecast(city, 'current');
      if (weather.error) { reply = weather.error; break; }

      reply = explicit
        ? await WeatherService.generateWeatherReport(weather, 'current')
        : await DeepSeekService.generateAnalysis(
            `–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç: ${weather.temp}¬∞C, ${weather.description}.`
          );
      outType = 'weather';
      break;
    }

    /* ---------- –†–ê–ó–ì–û–í–û–† –û –ü–û–ì–û–î–ï (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞) ------------------ */
    case 'weather_talk': {
      weather = await WeatherService.getWeatherForecast(city, 'current');
      reply   = await DeepSeekService.generateAnalysis(
        `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–ø–æ–º—è–Ω—É–ª –ø–æ–≥–æ–¥—É (${weather.description}). –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –±–µ–∑ —Ü–∏—Ñ—Ä.`
      );
      outType = 'weather';
      break;
    }

    /* ---------- –Ø–í–ù–´–ô –ó–ê–ü–†–û–° –î–ê–¢–´ ------------------------------- */
    case 'date_request': {
      reply = explicit
        ? `üìÖ ${TimeService.getCurrentDate()}`
        : await DeepSeekService.generateAnalysis(
            '–°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ, –Ω–µ –Ω–∞–∑—ã–≤–∞—è —á–∏—Å–ª–æ.'
          );
      break;
    }

    /* ---------- –ë–û–õ–¢–û–í–ù–Ø –û –î–ù–ï / –î–ê–¢–ï ---------------------------- */
    case 'date_talk': {
      reply = await DeepSeekService.generateAnalysis(
        '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–ø–æ–º–∏–Ω–∞–µ—Ç –¥–∞—Ç—É –∏–ª–∏ –¥–µ–Ω—å. –ü–æ–¥–¥–µ—Ä–∂–∏ –±–µ–∑ —Ç–æ—á–Ω—ã—Ö —á–∏—Å–µ–ª.'
      );
      break;
    }

    /* ---------- –Ø–í–ù–´–ô –ó–ê–ü–†–û–° –í–†–ï–ú–ï–ù–ò ----------------------------- */
    case 'time_request': {
      reply = explicit
        ? `üïí ${TimeService.getCurrentTime()}`
        : await DeepSeekService.generateAnalysis(
            '–û—Ç–≤–µ—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏, –∏–∑–±–µ–≥–∞—è —Ç–æ—á–Ω—ã—Ö —Ü–∏—Ñ—Ä.'
          );
      break;
    }

    /* ---------- –†–ê–ó–ì–û–í–û–† –û –í–†–ï–ú–ï–ù–ò ------------------------------- */
    case 'time_talk': {
      reply = await DeepSeekService.generateAnalysis(
        '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–ø–æ–º—è–Ω—É–ª –≤—Ä–µ–º—è —Å—É—Ç–æ–∫. –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä.'
      );
      break;
    }

    /* ---------- –û–ë–´–ß–ù–´–ô –î–ò–ê–õ–û–ì ----------------------------------- */
    default: {
      reply = await DeepSeekService.generateResponse(
        [...await ChatManager.getHistory(table),
         { role: 'user', content: m.content, mood }],
        settings, mood, style, phone
      );
    }
  }

  /* ----------------------------------------------------------------
   *                    –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê
   * ----------------------------------------------------------------*/
  async function logAndSave(sent, tp, ttsHash = null) {
    await ChatManager.saveMessage(
      table, chatId,
      reply, true, tp, mood, style,
      null, ttsHash, null, weather,
      msg.id._serialized, sent.id._serialized
    );
  }

  /* ---- –µ—Å–ª–∏ –∞—É–¥–∏–æ-–≤—Ö–æ–¥ ‚Üí –æ—Ç–≤–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–º ---- */
  if (m.type === 'voice') {
    const tts = await MediaProcessor.textToSpeech(reply, settings.tts_voice);
    if (tts) {
      const media = MessageMedia.fromFilePath(tts.path, { mimeType: 'audio/ogg; codecs=opus' });
      const sent  = await client.sendMessage(msg.from, media, { sendAudioAsVoice: true });
      await logAndSave(sent, 'voice', tts.hash);
      return;
    }
  }

  /* ---- –µ—Å–ª–∏ –∞–≤—Ç–æ-–æ–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ---- */
  if (settings.tts_enabled && m.type !== 'voice') {
    const tts = await MediaProcessor.textToSpeech(reply, settings.tts_voice);
    if (tts) {
      const sentTxt = await client.sendMessage(msg.from, reply);
      const media   = MessageMedia.fromFilePath(tts.path, { mimeType: 'audio/ogg; codecs=opus' });
      await client.sendMessage(msg.from, media, { sendAudioAsVoice: true });
      await logAndSave(sentTxt, 'voice', tts.hash);
      return;
    }
  }

  /* ---- –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç ---- */
  const sent = await client.sendMessage(msg.from, reply);
  await logAndSave(sent, outType);
});

/* ------------------------------------------------------------------ */
client.initialize();
